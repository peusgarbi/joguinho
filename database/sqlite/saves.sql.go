// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: saves.sql

package sqlite

import (
	"context"
)

const createSave = `-- name: CreateSave :one
INSERT INTO saves (
    nickname, currency
)
VALUES (?, ?)
RETURNING id, nickname, currency
`

type CreateSaveParams struct {
	Nickname string  `db:"nickname" json:"nickname"`
	Currency float64 `db:"currency" json:"currency"`
}

func (q *Queries) CreateSave(ctx context.Context, arg CreateSaveParams) (Safe, error) {
	row := q.db.QueryRowContext(ctx, createSave, arg.Nickname, arg.Currency)
	var i Safe
	err := row.Scan(&i.ID, &i.Nickname, &i.Currency)
	return i, err
}

const getAllSaves = `-- name: GetAllSaves :many
SELECT id, nickname, currency FROM saves
ORDER BY id ASC
`

func (q *Queries) GetAllSaves(ctx context.Context) ([]Safe, error) {
	rows, err := q.db.QueryContext(ctx, getAllSaves)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Safe{}
	for rows.Next() {
		var i Safe
		if err := rows.Scan(&i.ID, &i.Nickname, &i.Currency); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSave = `-- name: GetSave :one
SELECT id, nickname, currency FROM saves
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetSave(ctx context.Context, id int64) (Safe, error) {
	row := q.db.QueryRowContext(ctx, getSave, id)
	var i Safe
	err := row.Scan(&i.ID, &i.Nickname, &i.Currency)
	return i, err
}

const updateSave = `-- name: UpdateSave :one
UPDATE saves SET
nickname = ?,
currency = ?
WHERE id = ?
RETURNING id, nickname, currency
`

type UpdateSaveParams struct {
	Nickname string  `db:"nickname" json:"nickname"`
	Currency float64 `db:"currency" json:"currency"`
	ID       int64   `db:"id" json:"id"`
}

func (q *Queries) UpdateSave(ctx context.Context, arg UpdateSaveParams) (Safe, error) {
	row := q.db.QueryRowContext(ctx, updateSave, arg.Nickname, arg.Currency, arg.ID)
	var i Safe
	err := row.Scan(&i.ID, &i.Nickname, &i.Currency)
	return i, err
}
